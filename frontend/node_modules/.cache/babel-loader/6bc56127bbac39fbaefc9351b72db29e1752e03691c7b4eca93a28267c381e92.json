{"ast":null,"code":"import axios from 'axios';\n\n// Создаем экземпляр axios с базовыми настройками\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8000',\n  // Укажите URL вашего бекенда\n  withCredentials: false,\n  // Отключаем передачу кук\n  headers: {\n    Accept: 'application/json',\n    // Указываем, что принимаем JSON\n    'Content-Type': 'application/json' // Указываем, что отправляем JSON\n  }\n});\nexport default {\n  /**\r\n   * Регистрация пользователя\r\n   * @param {Object} user - Данные пользователя (username, email, password)\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\n  register(user) {\n    return apiClient.post('/register', user);\n  },\n  /**\r\n   * Авторизация пользователя\r\n   * @param {Object} user - Данные пользователя (username, password)\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\n  login(user) {\n    return apiClient.post('/token', user);\n  },\n  /**\r\n   * Получение информации о текущем пользователе\r\n   * @param {string} token - Токен авторизации\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\n  getUserInfo(token) {\n    return apiClient.get('/users/me', {\n      headers: {\n        Authorization: `Bearer ${token}` // Передаем токен в заголовке\n      }\n    });\n  },\n  /**\r\n   * Обновление информации о пользователе\r\n   * @param {string} token - Токен авторизации\r\n   * @param {Object} userData - Данные для обновления (username, email, avatar и т.д.)\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\n  updateUserInfo(token, userData) {\n    return apiClient.put('/users/me/update', userData, {\n      headers: {\n        Authorization: `Bearer ${token}` // Передаем токен в заголовке\n      }\n    });\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","register","user","post","login","getUserInfo","token","get","Authorization","updateUserInfo","userData","put"],"sources":["F:/_MentalHealthSecond/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Создаем экземпляр axios с базовыми настройками\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:8000', // Укажите URL вашего бекенда\r\n  withCredentials: false, // Отключаем передачу кук\r\n  headers: {\r\n    Accept: 'application/json', // Указываем, что принимаем JSON\r\n    'Content-Type': 'application/json', // Указываем, что отправляем JSON\r\n  },\r\n});\r\n\r\nexport default {\r\n  /**\r\n   * Регистрация пользователя\r\n   * @param {Object} user - Данные пользователя (username, email, password)\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\r\n  register(user) {\r\n    return apiClient.post('/register', user);\r\n  },\r\n\r\n  /**\r\n   * Авторизация пользователя\r\n   * @param {Object} user - Данные пользователя (username, password)\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\r\n  login(user) {\r\n    return apiClient.post('/token', user);\r\n  },\r\n\r\n  /**\r\n   * Получение информации о текущем пользователе\r\n   * @param {string} token - Токен авторизации\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\r\n  getUserInfo(token) {\r\n    return apiClient.get('/users/me', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`, // Передаем токен в заголовке\r\n      },\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Обновление информации о пользователе\r\n   * @param {string} token - Токен авторизации\r\n   * @param {Object} userData - Данные для обновления (username, email, avatar и т.д.)\r\n   * @returns {Promise} - Ответ от сервера\r\n   */\r\n  updateUserInfo(token, userData) {\r\n    return apiClient.put('/users/me/update', userData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`, // Передаем токен в заголовке\r\n      },\r\n    });\r\n  },\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,eAAe,EAAE,KAAK;EAAE;EACxBC,OAAO,EAAE;IACPC,MAAM,EAAE,kBAAkB;IAAE;IAC5B,cAAc,EAAE,kBAAkB,CAAE;EACtC;AACF,CAAC,CAAC;AAEF,eAAe;EACb;AACF;AACA;AACA;AACA;EACEC,QAAQA,CAACC,IAAI,EAAE;IACb,OAAOP,SAAS,CAACQ,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;EAC1C,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,KAAKA,CAACF,IAAI,EAAE;IACV,OAAOP,SAAS,CAACQ,IAAI,CAAC,QAAQ,EAAED,IAAI,CAAC;EACvC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEG,WAAWA,CAACC,KAAK,EAAE;IACjB,OAAOX,SAAS,CAACY,GAAG,CAAC,WAAW,EAAE;MAChCR,OAAO,EAAE;QACPS,aAAa,EAAE,UAAUF,KAAK,EAAE,CAAE;MACpC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,cAAcA,CAACH,KAAK,EAAEI,QAAQ,EAAE;IAC9B,OAAOf,SAAS,CAACgB,GAAG,CAAC,kBAAkB,EAAED,QAAQ,EAAE;MACjDX,OAAO,EAAE;QACPS,aAAa,EAAE,UAAUF,KAAK,EAAE,CAAE;MACpC;IACF,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}