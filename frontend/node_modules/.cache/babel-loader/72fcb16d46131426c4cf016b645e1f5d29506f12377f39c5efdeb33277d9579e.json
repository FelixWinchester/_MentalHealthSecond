{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/api/api'; // Укажите правильный путь к файлу api.js\n\nexport default {\n  name: 'RegisterPage',\n  data() {\n    return {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      isLoading: false,\n      pageTitle: 'Регистрация' // Добавьте это свойство\n    };\n  },\n  methods: {\n    async handleRegister() {\n      if (this.password !== this.confirmPassword) {\n        alert('Пароли не совпадают!');\n        return;\n      }\n      this.isLoading = true;\n      try {\n        const response = await api.register({\n          username: this.username,\n          email: this.email,\n          password: this.password\n        });\n        console.log('Ответ сервера:', response);\n        alert('Регистрация прошла успешно!');\n        this.$router.push('/login');\n      } catch (error) {\n        console.error('Ошибка при регистрации:', error);\n        if (error.response) {\n          alert('Ошибка при регистрации: ' + error.response.data.detail);\n        } else if (error.request) {\n          alert('Ошибка сети: сервер не ответил');\n        } else {\n          alert('Ошибка: ' + error.message);\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","username","email","password","confirmPassword","isLoading","pageTitle","methods","handleRegister","alert","response","register","console","log","$router","push","error","detail","request","message"],"sources":["C:\\Users\\Professional\\Desktop\\gggg\\_MentalHealthSecond\\frontend\\src\\components\\RegisterPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"condition-page\">\r\n    <!-- Заголовок страницы -->\r\n    <header class=\"header\">\r\n      <h1>Мое состояние</h1>\r\n      <p>Здесь вы можете отслеживать ваше эмоциональное состояние и делать заметки</p>\r\n    </header>\r\n\r\n    <!-- Основной контент -->\r\n    <main class=\"content\">\r\n      <div class=\"main-layout\">\r\n        <!-- Блок с заметками -->\r\n        <section class=\"notes-section\">\r\n          <div v-if=\"loading\" class=\"loading\">Загрузка...</div>\r\n          <div v-else>\r\n            <div v-for=\"note in notes\" :key=\"note.id\" class=\"note-card\">\r\n              {{ note.text }}\r\n              <button @click=\"deleteNote(note.id)\" class=\"delete-button\">×</button>\r\n            </div>\r\n          </div>\r\n          <div class=\"new-note\">\r\n            <textarea \r\n              v-model=\"newNote\" \r\n              placeholder=\"Добавьте новую заметку...\"\r\n              @keyup.enter=\"addNote\"\r\n            ></textarea>\r\n            <button @click=\"addNote\" class=\"cta-button\">Добавить</button>\r\n          </div>\r\n        </section>\r\n\r\n        <!-- Блок с эмодзи -->\r\n        <aside class=\"emoji-sidebar\">\r\n          <h3>Выберите эмоцию</h3>\r\n          <div class=\"emoji-grid\">\r\n            <button \r\n              v-for=\"emoji in emojis\" \r\n              :key=\"emoji\"\r\n              @click=\"selectEmoji(emoji)\"\r\n              class=\"emoji-button\"\r\n              :class=\"{ 'selected': selectedEmoji === emoji }\"\r\n            >\r\n              {{ emoji }}\r\n            </button>\r\n          </div>\r\n          <div class=\"selected-emoji\">\r\n            Выбрано: {{ selectedEmoji || 'пока ничего' }}\r\n          </div>\r\n        </aside>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from '@/api/api'; // Укажите правильный путь к файлу api.js\r\n\r\nexport default {\r\n  name: 'RegisterPage',\r\n  data() {\r\n    return {\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      isLoading: false,\r\n      pageTitle: 'Регистрация', // Добавьте это свойство\r\n    };\r\n  },\r\n  methods: {\r\n        async handleRegister() {\r\n          if (this.password !== this.confirmPassword) {\r\n            alert('Пароли не совпадают!');\r\n            return;\r\n          }\r\n\r\n          this.isLoading = true;\r\n\r\n          try {\r\n            const response = await api.register({\r\n              username: this.username,\r\n              email: this.email,\r\n              password: this.password,\r\n            });\r\n\r\n            console.log('Ответ сервера:', response);\r\n            alert('Регистрация прошла успешно!');\r\n            this.$router.push('/login');\r\n          } catch (error) {\r\n            console.error('Ошибка при регистрации:', error);\r\n            if (error.response) {\r\n              alert('Ошибка при регистрации: ' + error.response.data.detail);\r\n            } else if (error.request) {\r\n              alert('Ошибка сети: сервер не ответил');\r\n            } else {\r\n              alert('Ошибка: ' + error.message);\r\n            }\r\n          } finally {\r\n            this.isLoading = false;\r\n          }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.register-page {\r\n  font-family: Arial, sans-serif;\r\n  color: #333;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.header {\r\n  text-align: center;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.header h1 {\r\n  font-size: 2.5rem;\r\n  color: #2c3e50;\r\n}\r\n\r\n.header p {\r\n  font-size: 1.2rem;\r\n  color: #666;\r\n}\r\n\r\n.content {\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.section {\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.section h2 {\r\n  font-size: 2rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.register-section {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 40px;\r\n}\r\n\r\n.register-form {\r\n  flex: 1;\r\n}\r\n\r\n.register-form p {\r\n  font-size: 1.1rem;\r\n  line-height: 1.6;\r\n  color: #444;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  font-size: 1rem;\r\n  color: #444;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.form-group input {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.cta-button {\r\n  background-color: #2c3e50;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n}\r\n\r\n.cta-button:hover {\r\n  background-color: #1a2a36;\r\n}\r\n\r\n.cta-button:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.register-image img {\r\n  max-width: 100%;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.info-section {\r\n  text-align: center;\r\n}\r\n\r\n.info-section p {\r\n  font-size: 1.1rem;\r\n  color: #666;\r\n}\r\n\r\n.info-section a {\r\n  color: #2c3e50;\r\n  text-decoration: none;\r\n}\r\n\r\n.info-section a:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>"],"mappings":";AAsDA,OAAOA,GAAE,MAAO,WAAW,EAAE;;AAE7B,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,SAAS,EAAE,KAAK;MAChBC,SAAS,EAAE,aAAa,CAAE;IAC5B,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACH,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,IAAI,CAACL,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QAC1CK,KAAK,CAAC,sBAAsB,CAAC;QAC7B;MACF;MAEA,IAAI,CAACJ,SAAQ,GAAI,IAAI;MAErB,IAAI;QACF,MAAMK,QAAO,GAAI,MAAMZ,GAAG,CAACa,QAAQ,CAAC;UAClCV,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC;QAEFS,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAAC;QACvCD,KAAK,CAAC,6BAA6B,CAAC;QACpC,IAAI,CAACK,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC7B,EAAE,OAAOC,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAIA,KAAK,CAACN,QAAQ,EAAE;UAClBD,KAAK,CAAC,0BAAyB,GAAIO,KAAK,CAACN,QAAQ,CAACV,IAAI,CAACiB,MAAM,CAAC;QAChE,OAAO,IAAID,KAAK,CAACE,OAAO,EAAE;UACxBT,KAAK,CAAC,gCAAgC,CAAC;QACzC,OAAO;UACLA,KAAK,CAAC,UAAS,GAAIO,KAAK,CAACG,OAAO,CAAC;QACnC;MACF,UAAU;QACR,IAAI,CAACd,SAAQ,GAAI,KAAK;MACxB;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}